{"version":3,"sources":["firebase.js","store/UserProvider.js","components/Login.js","components/AddTask.js","components/Task.js","components/TaskList.js","components/Interface.js","Routing/Routing.js","App.js","reportWebVitals.js","serviceWorkerRegistration.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","auth","provider","firestore","GoogleAuthProvider","UserContext","createContext","user","UserProvider","children","useState","setUser","useEffect","onAuthStateChanged","userAuth","Provider","value","Login","useContext","className","onClick","signInWithPopup","AddTask","add","minDate","Date","toISOString","slice","maxDate","text","setText","checked","setChecked","date","setDate","type","placeholder","onChange","e","target","id","htmlFor","min","max","alert","Task","task","deleteTask","change","active","important","finishDate","style","color","finishTime","toLocaleString","TaskList","tasks","filter","done","length","sort","a","b","toLowerCase","activeTasks","map","doneTasks","fontSize","Interface","setTasks","counter","signOut","prevTasks","tasksList","forEach","getTime","Routing","exact","path","render","to","App","basename","process","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","StrictMode","document","getElementById","URL","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.af051bb9.chunk.js","sourcesContent":["import firebase from \"firebase/app\";\r\nimport \"firebase/auth\";\r\nimport \"firebase/firestore\";\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyDRoIAlW3caflcx-ax6o40VbfNcqxXI0F4\",\r\n    authDomain: \"plantime-7d8e2.firebaseapp.com\",\r\n    projectId: \"plantime-7d8e2\",\r\n    storageBucket: \"plantime-7d8e2.appspot.com\",\r\n    messagingSenderId: \"175309483958\",\r\n    appId: \"1:175309483958:web:d6c2aef9adc0f03eecdb17\",\r\n    measurementId: \"G-N1HDPPBVPV\"\r\n};\r\n\r\nfirebase.initializeApp(firebaseConfig);\r\nexport const auth = firebase.auth();\r\nexport const firestore = firebase.firestore();\r\n\r\nconst provider = new firebase.auth.GoogleAuthProvider();\r\n\r\nexport const signInWithGoogle = () => {\r\n    auth.signInWithPopup(provider);\r\n};","import React, { createContext, useEffect, useState } from \"react\";\r\nimport { auth } from \"../firebase\";\r\n\r\nexport const UserContext = createContext({ user: null });\r\n\r\nconst UserProvider = ({ children }) => {\r\n    const [user, setUser] = useState(null)\r\n\r\n    useEffect(() => {\r\n        auth.onAuthStateChanged(userAuth => setUser(userAuth))\r\n    }, []);\r\n\r\n    return (\r\n        <UserContext.Provider value={{ user }}>\r\n            {children}\r\n        </UserContext.Provider>\r\n    );\r\n}\r\n\r\nexport default UserProvider;","import React, { useContext } from 'react';\r\nimport './css/App.css';\r\n\r\nimport { UserContext } from '../store/UserProvider';\r\n\r\nimport { signInWithGoogle } from \"../firebase\";\r\n\r\n\r\nconst Login = () => {\r\n    const { user } = useContext(UserContext);\r\n\r\n    const logIn = () => {\r\n        if (!user) {\r\n            signInWithGoogle()\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <button className=\"loginbutton\" onClick={logIn}>Log In</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Login;","import React, { useState, useContext } from 'react';\r\nimport './css/AddTask.css';\r\n\r\nimport { UserContext } from '../store/UserProvider';\r\n\r\nconst AddTask = ({ add }) => {\r\n    const { user } = useContext(UserContext);\r\n\r\n    let minDate = new Date().toISOString().slice(0, 10);\r\n    let maxDate = minDate.slice(0, 4) * 1 + 1\r\n    maxDate = maxDate + \"-12-31\"\r\n\r\n    const [text, setText] = useState('');\r\n    const [checked, setChecked] = useState(false);\r\n    const [date, setDate] = useState(minDate)\r\n\r\n    const handleDate = (e) => {\r\n        setDate(e.target.value);\r\n    }\r\n\r\n    const handleText = (e) => {\r\n        setText(e.target.value);\r\n    }\r\n\r\n    const handleCheckbox = (e) => {\r\n        setChecked(e.target.checked)\r\n    }\r\n\r\n    const handleClick = () => {\r\n        if (user) {\r\n            if (text) {\r\n                const setTask = add(text, date, checked);\r\n                if (setTask) {\r\n                    setText(text);\r\n                    setChecked(false);\r\n                    setDate(minDate)\r\n                } else alert('Wprowadź treść zadania!')\r\n            }\r\n        } else alert('Musisz się zalogować')\r\n    }\r\n\r\n    return (\r\n        <div className=\"form\">\r\n            <input type=\"text\" placeholder=\"Wpisz zadanie...\" value={text} onChange={handleText} />\r\n            <input type=\"checkbox\" checked={checked} id=\"important\" onChange={handleCheckbox} />\r\n            <label htmlFor=\"important\">Priorytet</label>\r\n            <br />\r\n            <label htmlFor=\"date\">Do kiedy zrobić: </label>\r\n            <input type=\"date\" id=\"date\" value={date} min={minDate} max={maxDate} onChange={handleDate} />\r\n            <br />\r\n            <button onClick={handleClick}>Dodaj</button>\r\n            <hr />\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default AddTask;","import React from 'react';\r\n\r\nconst Task = ({ task, deleteTask, change }) => {\r\n\r\n    const { text, date, id, active, important, finishDate } = task\r\n\r\n    const style = {\r\n        color: 'red'\r\n    }\r\n\r\n    if (active) {\r\n        return (\r\n            <>\r\n                <p>\r\n                    <strong style={important ? style : null}>{text}</strong> - do <span>{date} </span>\r\n                    <button onClick={() => change(id)}>Zostało zrobione</button>\r\n                    <button onClick={() => deleteTask(id)}>X</button>\r\n                </p>\r\n            </>\r\n        )\r\n    } else {\r\n\r\n        const finishTime = new Date(finishDate).toLocaleString()\r\n\r\n        return (\r\n            <>\r\n                <p>\r\n                    <strong>{text}</strong> <em>(do {date})</em>\r\n                    <br />\r\n                    - potwierdzenie wykonania: <span>{finishTime} </span>\r\n                    <button onClick={() => deleteTask(id)}>X</button>\r\n                </p>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Task;","import React from 'react';\r\n\r\nimport Task from './Task'\r\n\r\nconst TaskList = ({ tasks, deleteTask, change }) => {\r\n\r\n    const active = tasks.filter(task => task.active);\r\n    const done = tasks.filter(task => !task.active);\r\n\r\n    if (done.length >= 2) {\r\n        done.sort((a, b) => {\r\n            return b.finishDate - a.finishDate\r\n        })\r\n    }\r\n\r\n    if (active.length >= 2) {\r\n        active.sort((a, b) => {\r\n            a = a.text.toLowerCase();\r\n            b = b.text.toLowerCase();\r\n\r\n            if (a < b) return -1;\r\n            if (a > b) return 1;\r\n            return 0;\r\n        })\r\n    }\r\n\r\n    const activeTasks = active.map(task => (\r\n        <Task\r\n            key={task.id}\r\n            task={task}\r\n            deleteTask={deleteTask}\r\n            change={change}\r\n        />\r\n    ))\r\n\r\n    const doneTasks = done.map(task => (\r\n        <Task\r\n            key={task.id}\r\n            task={task}\r\n            deleteTask={deleteTask}\r\n            change={change}\r\n        />\r\n    ))\r\n\r\n    return (\r\n        <>\r\n            <div className=\"active\">\r\n                <h2>Zadania do zrobienia:</h2>\r\n                {activeTasks.length > 0 ? activeTasks : <p>Ale szczęście :)</p>}\r\n            </div>\r\n\r\n            <hr />\r\n\r\n            <div className='done'>\r\n                <h2>Zadania zrobione <em>({done.length})</em>:</h2>\r\n                {done.length > 5 && <span style={{ fontSize: \"10px\" }}>Wyświetlonych jest ostatnich 5 zadań</span>}\r\n                {doneTasks.slice(0, 5)}\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default TaskList;","import React, { useState } from 'react';\r\nimport './css/App.css';\r\n\r\nimport AddTask from './AddTask';\r\nimport TaskList from './TaskList';\r\n\r\nimport { auth } from \"../firebase\";\r\n\r\n\r\nconst Interface = () => {\r\n\r\n    const logOut = () => {\r\n        auth.signOut();\r\n        alert('You were signed out');\r\n    }\r\n\r\n\r\n    const [tasks, setTasks] = useState([\r\n        {\r\n            id: 0,\r\n            text: 'Dodać osobne taski dla każdego użytkownika',\r\n            date: '2021-03-01',\r\n            important: false,\r\n            finishDate: null,\r\n            active: true\r\n        },\r\n        {\r\n            id: 1,\r\n            text: 'Dostosować CSS',\r\n            date: '2021-03-01',\r\n            important: false,\r\n            finishDate: null,\r\n            active: true\r\n        }\r\n    ])\r\n\r\n    let counter = tasks.length;\r\n\r\n    const deleteTask = (id) => {\r\n        let tasksList = [...tasks];\r\n        tasksList = tasksList.filter(task => task.id !== id);\r\n        setTasks(tasksList);\r\n    }\r\n\r\n    const changeTaskStatus = (id) => {\r\n        const tasksList = [...tasks];\r\n        tasksList.forEach(task => {\r\n            if (task.id === id) {\r\n                task.active = false;\r\n                task.finishDate = new Date().getTime()\r\n            }\r\n            setTasks(tasksList);\r\n        })\r\n    }\r\n\r\n\r\n    const addTask = (text, date, important) => {\r\n        const task = {\r\n            id: counter,\r\n            text,\r\n            date,\r\n            important,\r\n            finishDate: null,\r\n            active: true\r\n        }\r\n        counter++;\r\n        setTasks(prevTasks => [...prevTasks, task]);\r\n        return true;\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <h1>To Do App</h1>\r\n            <button className=\"signout\" onClick={logOut}>Log Out</button>\r\n            <AddTask tasks={tasks} add={addTask} />\r\n            <TaskList tasks={tasks} deleteTask={deleteTask} change={changeTaskStatus} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Interface;\r\n","import React, { useContext } from 'react'\r\n\r\nimport { Route, Switch, Redirect } from 'react-router-dom';\r\nimport { UserContext } from '../store/UserProvider';\r\n\r\nimport Login from '../components/Login';\r\nimport Interface from '../components/Interface';\r\n\r\n\r\nconst Routing = () => {\r\n    const { user } = useContext(UserContext);\r\n\r\n    return (\r\n        <Switch>\r\n            <Route exact path=\"/\" render={() => user ? <Interface /> : <Redirect to=\"/login\" />} />\r\n            <Route path=\"/login\" render={() => user ? <Redirect to=\"/\" /> : <Login />} />\r\n            <Route render={() => user ? <Redirect to=\"/\" /> : <Redirect to=\"/login\" />} />\r\n        </Switch>\r\n    )\r\n}\r\n\r\nexport default Routing;","import React from 'react';\nimport './components/css/App.css';\n\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nimport Routing from './Routing/Routing';\nimport UserProvider from './store/UserProvider';\n\n\nconst App = () => {\n\n  return (\n    <>\n      <UserProvider>\n        <Router basename={process.env.PUBLIC_URL}>\n          <Routing />\n        </Router>\n      </UserProvider>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}